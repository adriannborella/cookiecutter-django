image: python:3.9-slim-buster                  # version de python utilizada en docker, acorde a requirements
cache:
  paths:
    - ~/.cache/pip/                  # necesario para instalar dependencias usando pip
services:
  - postgres:latest                  # servicio para db
variables:
  PG_DB_NAME: db_develop            # variables necesarias para el servicio, acorder a la db presente en archivo settings_ci
  PG_USER: equality
  PG_PASS: "desarrollo"
  PG_HOST: db
  PG_PORT: 5432
  ALLOWED_HOSTS: postgres, 127.0.0.1, localhost
  SECRET_KEY: 0c63a75b845e4f7d01107d852e4c2485c51a50aaaa94fc61995e71bbee983a2ac3713831264adb47fb6bd1e058d5f004
  PTOKEN: "${PTOKEN}"       # DEFINIR EN SETTINGS DE GITLAB
  COVERAGE_LIMIT: "${COVERAGE_LIMIT}"       # DEFINIR EN SETTINGS DE GITLAB
  POSTGRES_HOST_AUTH_METHOD: trust
  PASS_USER_DB: "postgres"
stages:                              # Listado de etapas en orden de ejecucion
  - pipelineClean
  - coverage
  - coverageLimit
pipeline-clean-job:
  image: alpine:latest
  stage: pipelineClean
  variables:
      PRIVATE_HEADER: "PRIVATE-TOKEN: ${PTOKEN}"
      PER_PAGE: 100
  before_script:
      - apk add --update --no-cache curl jq
  script:
      - curl -s --header "${PRIVATE_HEADER}" "${CI_API_V4_URL}/projects/${CI_PROJECT_ID}/pipelines?per_page=$PER_PAGE&sort=asc"  >> $pipes.json
      - ID_LIST=$(cat $pipes.json | jq '.[].id')
      - > 
        for ID in ${ID_LIST}; do
          PURL="${CI_API_V4_URL}/projects/${CI_PROJECT_ID}/pipelines/${ID}"
          PIPELINE_REF=$(cat $pipes.json | jq -r '.[] | select(.id == '$ID') | .ref')
          echo "${PIPELINE_REF}"
          echo "${CI_COMMIT_BRANCH}"
          if [ ${ID} != ${CI_PIPELINE_ID} ] && [ ${PIPELINE_REF} == ${CI_COMMIT_BRANCH} ]; then
            echo "Deleting pipeline ${ID}";
            curl -s --header "${PRIVATE_HEADER}" --request "DELETE" $PURL;
          fi;
        done
coverage-job:                       # Tareas que corren en la etapa coverage
  stage: coverage                        # Solo comienza si la etapa build se completa con exito
  variables:                         # Url de la db con la estructura: postgresql://user:pass@host:port/$PG_DB_NAME"
    DATABASE_URL: "postgresql://$PG_USER:$PG_PASS@$PG_HOST:$PG_PORT/$PG_DB_NAME"
  script:
    - pip install -r back/requirements/local.txt
    - cd back                        # Listado de scripts a correr en esta etapa
    - bash coverage.sh
  coverage: '/TOTAL.*\s+(\d+\%)/'
  artifacts:
    expose_as: Coverage report
    paths: 
        - back/htmlcov/
    reports:
      coverage_report:
        coverage_format: cobertura
        path: back/htmlcov/index.html
coverage-limit-job:
  image: alpine:latest
  stage: coverageLimit
  variables:
      JOB_NAME: unit-test-job
      PRIVATE_HEADER: "PRIVATE-TOKEN: ${PTOKEN}"
  before_script:
      - apk add --update --no-cache curl jq
  script:
      - URL="${CI_API_V4_URL}/projects/${CI_PROJECT_ID}/pipelines/${CI_PIPELINE_ID}/jobs?job_token=${CI_JOB_TOKEN}"      
      - JSON=`curl -s --header "${PRIVATE_HEADER}" $URL`
      - CURRENT_COVERAGE=`curl -s --header "${PRIVATE_HEADER}" $URL | jq '.[] | select(.name=="unit-test-job") | .coverage'`      
      - if [ "$CURRENT_COVERAGE" -lt $COVERAGE_LIMIT ]; then echo "El coverage es menor a ${COVERAGE_LIMIT}%";exit 1; fi;
